--- php-7.1.33.org/main/php_ini.c	2019-10-22 19:00:03.000000000 +0200
+++ php-7.1.33.new/main/php_ini.c	2024-06-13 19:13:23.976364417 +0200
@@ -377,12 +377,19 @@ static void php_load_zend_extension_cb(v
 #endif
 /* }}} */
 
+static int php_csort(const struct dirent **a, const struct dirent **b)
+{
+	return strcmp((*a)->d_name,(*b)->d_name);
+}
+
 /* {{{ php_init_config
  */
 int php_init_config(void)
 {
 	char *php_ini_file_name = NULL;
 	char *php_ini_search_path = NULL;
+	// value for php_ini_loaded_file() to be stored into php_ini_opened_path
+	char *php_ini_loaded_file = NULL;
 	int php_ini_scanned_path_len;
 	char *open_basedir;
 	int free_ini_search_path = 0;
@@ -559,8 +566,28 @@ int php_init_config(void)
 				}
 			}
 		}
+		/* Search (global) php.ini file in search path */
+		if (!fh.handle.fp) {
+			fh.handle.fp = php_fopen_with_path("php.ini", "r", php_ini_search_path, &opened_path);
+			if (fh.handle.fp) {
+				fh.filename = ZSTR_VAL(opened_path);
 
-		/* Otherwise search for php-%sapi-module-name%.ini file in search path */
+				// parse the ini file now
+				PG(open_basedir) = open_basedir;
+				fh.type = ZEND_HANDLE_FP;
+				zend_parse_ini_file(&fh, 1, ZEND_INI_SCANNER_NORMAL, (zend_ini_parser_cb_t) php_ini_parser_cb, &configuration_hash TSRMLS_CC);
+				open_basedir = PG(open_basedir);
+				PG(open_basedir) = NULL;
+				fh.handle.fp = NULL;
+				php_ini_loaded_file = estrdup(fh.filename);
+				fh.filename = NULL;
+				// opened_path no longer needed as we will use php_ini_loaded_file
+				zend_string_release_ex(opened_path, 0);
+				opened_path = NULL;
+			}
+		}
+
+		/* Also search for php-%sapi-module-name%.ini file in search path */
 		if (!fh.handle.fp) {
 			const char *fmt = "php-%s.ini";
 			char *ini_fname;
@@ -570,15 +597,8 @@ int php_init_config(void)
 			if (fh.handle.fp) {
 				fh.filename = ZSTR_VAL(opened_path);
 			}
-		}
 
-		/* If still no ini file found, search for php.ini file in search path */
-		if (!fh.handle.fp) {
-			fh.handle.fp = php_fopen_with_path("php.ini", "r", php_ini_search_path, &opened_path);
-			if (fh.handle.fp) {
-				fh.filename = ZSTR_VAL(opened_path);
-			}
-		}
+ 		}
 	}
 
 	if (free_ini_search_path) {
@@ -595,14 +615,30 @@ int php_init_config(void)
 
 		{
 			zval tmp;
+			// use main php.ini if loaded
+			// see https://github.com/pld-linux/php/commit/762ec2e
+			// test with:
+			// php -r 'var_dump(array(get_cfg_var("cfg_file_path"),php_ini_loaded_file()));'
+			if (php_ini_loaded_file) {
+				fh.filename = php_ini_loaded_file;
+			}
 
 			ZVAL_NEW_STR(&tmp, zend_string_init(fh.filename, strlen(fh.filename), 1));
 			zend_hash_str_update(&configuration_hash, "cfg_file_path", sizeof("cfg_file_path")-1, &tmp);
+
+			if (php_ini_loaded_file) {
+				// free our fh.filename main ini duplicate
+				efree((char *)php_ini_loaded_file);
+			}
+
 			if (opened_path) {
+				// free php_fopen_with_path allocated area
 				zend_string_release_ex(opened_path, 0);
 			} else {
+				// free expand_filepath allocated area
 				efree((char *)fh.filename);
 			}
+
 			php_ini_opened_path = zend_strndup(Z_STRVAL(tmp), Z_STRLEN(tmp));
 		}
 	}
@@ -626,13 +662,15 @@ int php_init_config(void)
 		zend_llist scanned_ini_list;
 		zend_llist_element *element;
 		int l, total_l = 0;
+		const char *fmt = "%s:" PHP_CONFIG_FILE_PATH "/%s.d";
 		char *bufpath, *debpath, *endpath;
 		int lenpath;
 
 		zend_llist_init(&scanned_ini_list, sizeof(char *), (llist_dtor_func_t) free_estring, 1);
 		memset(&fh2, 0, sizeof(fh2));
 
-		bufpath = estrdup(php_ini_scanned_path);
+		bufpath = emalloc(strlen(php_ini_scanned_path) + strlen(fmt) + strlen(sapi_module.name));
+		sprintf(bufpath, fmt, php_ini_scanned_path, sapi_module.name);
 		for (debpath = bufpath ; debpath ; debpath=endpath) {
 			endpath = strchr(debpath, DEFAULT_DIR_SEPARATOR);
 			if (endpath) {
@@ -645,7 +683,7 @@ int php_init_config(void)
 			}
 			lenpath = (int)strlen(debpath);
 
-			if (lenpath > 0 && (ndir = php_scandir(debpath, &namelist, 0, php_alphasort)) > 0) {
+			if (lenpath > 0 && (ndir = php_scandir(debpath, &namelist, 0, php_csort)) > 0) {
 
 				for (i = 0; i < ndir; i++) {
 
