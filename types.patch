--- php-8.0.28/ext/pdo_dblib/dblib_stmt.c.orig	2023-02-14 12:05:44.000000000 +0100
+++ php-8.0.28/ext/pdo_dblib/dblib_stmt.c	2025-01-23 00:05:26.067889731 +0100
@@ -347,7 +347,7 @@
 }
 
 static int pdo_dblib_stmt_get_col(pdo_stmt_t *stmt, int colno, char **ptr,
-	 zend_ulong *len, int *caller_frees)
+	 size_t *len, int *caller_frees)
 {
 
 	pdo_dblib_stmt *S = (pdo_dblib_stmt*)stmt->driver_data;
--- php-8.0.28/ext/pdo_firebird/firebird_statement.c.orig	2023-02-14 12:05:44.000000000 +0100
+++ php-8.0.28/ext/pdo_firebird/firebird_statement.c	2025-01-23 00:16:13.415116725 +0100
@@ -259,7 +259,7 @@
 
 /* fetch a blob into a fetch buffer */
 static int firebird_fetch_blob(pdo_stmt_t *stmt, int colno, char **ptr, /* {{{ */
-	zend_ulong *len, ISC_QUAD *blob_id)
+	size_t *len, ISC_QUAD *blob_id)
 {
 	pdo_firebird_stmt *S = (pdo_firebird_stmt*)stmt->driver_data;
 	pdo_firebird_db_handle *H = S->H;
@@ -341,7 +341,7 @@
 /* }}} */
 
 static int firebird_stmt_get_col(pdo_stmt_t *stmt, int colno, char **ptr,  /* {{{ */
-	zend_ulong *len, int *caller_frees)
+	size_t *len, int *caller_frees)
 {
 	pdo_firebird_stmt *S = (pdo_firebird_stmt*)stmt->driver_data;
 	XSQLVAR const *var = &S->out_sqlda.sqlvar[colno];
@@ -561,7 +561,7 @@
 
 	switch (event_type) {
 		char *value;
-		zend_ulong value_len;
+		size_t  value_len;
 		int caller_frees;
 		zval *parameter;
 
--- php-8.0.28/ext/pdo_odbc/odbc_stmt.c.orig	2023-02-14 12:05:44.000000000 +0100
+++ php-8.0.28/ext/pdo_odbc/odbc_stmt.c	2025-01-23 00:30:24.886905826 +0100
@@ -89,7 +89,7 @@
 }
 
 static int pdo_odbc_ucs22utf8(pdo_stmt_t *stmt, int is_unicode, const char *buf,
-	zend_ulong buflen, zend_ulong *outlen)
+	zend_ulong buflen, size_t *outlen)
 {
 #ifdef PHP_WIN32
 	if (is_unicode && buflen) {
@@ -487,9 +487,9 @@
 				P = param->driver_data;
 
 				if (P->outbuf) {
-					zend_ulong ulen;
+					size_t ulen;
 					char *srcbuf;
-					zend_ulong srclen = 0;
+					size_t srclen = 0;
 
 					if (Z_ISREF(param->parameter)) {
 						parameter = Z_REFVAL(param->parameter);
@@ -646,11 +646,11 @@
 	return 1;
 }
 
-static int odbc_stmt_get_col(pdo_stmt_t *stmt, int colno, char **ptr, zend_ulong *len, int *caller_frees)
+static int odbc_stmt_get_col(pdo_stmt_t *stmt, int colno, char **ptr, size_t *len, int *caller_frees)
 {
 	pdo_odbc_stmt *S = (pdo_odbc_stmt*)stmt->driver_data;
 	pdo_odbc_column *C = &S->cols[colno];
-	zend_ulong ulen;
+	size_t ulen;
 
 	/* if it is a column containing "long" data, perform late binding now */
 	if (C->is_long) {
--- php-7.3.33/ext/interbase/ibase_events.c.orig	2021-11-16 12:18:38.000000000 +0100
+++ php-7.3.33/ext/interbase/ibase_events.c	2025-01-23 12:24:50.473401624 +0100
@@ -105,7 +105,7 @@
 	 * so we can work around it.
 	 */
 
-	*l = (unsigned short) isc_event_block(event_buf, result_buf, count, events[0],
+	*l = (unsigned short) isc_event_block((ISC_UCHAR**)event_buf, (ISC_UCHAR**)result_buf, count, events[0],
 		events[1], events[2], events[3], events[4], events[5], events[6], events[7],
 		events[8], events[9], events[10], events[11], events[12], events[13], events[14]);
 
--- php-7.3.33/ext/pdo_pgsql/pgsql_statement.c.orig	2021-11-16 12:18:30.000000000 +0100
+++ php-7.3.33/ext/pdo_pgsql/pgsql_statement.c	2025-01-23 12:27:31.864330762 +0100
@@ -526,7 +526,7 @@
 	return 1;
 }
 
-static int pgsql_stmt_get_col(pdo_stmt_t *stmt, int colno, char **ptr, zend_ulong *len, int *caller_frees )
+static int pgsql_stmt_get_col(pdo_stmt_t *stmt, int colno, char **ptr, size_t *len, int *caller_frees )
 {
 	pdo_pgsql_stmt *S = (pdo_pgsql_stmt*)stmt->driver_data;
 	struct pdo_column_data *cols = stmt->columns;
--- php-7.3.33/ext/pdo_sqlite/sqlite_statement.c.orig	2021-11-16 12:18:38.000000000 +0100
+++ php-7.3.33/ext/pdo_sqlite/sqlite_statement.c	2025-01-23 12:28:47.274764904 +0100
@@ -299,7 +299,7 @@
 	return 1;
 }
 
-static int pdo_sqlite_stmt_get_col(pdo_stmt_t *stmt, int colno, char **ptr, zend_ulong *len, int *caller_frees)
+static int pdo_sqlite_stmt_get_col(pdo_stmt_t *stmt, int colno, char **ptr, size_t *len, int *caller_frees)
 {
 	pdo_sqlite_stmt *S = (pdo_sqlite_stmt*)stmt->driver_data;
 	if (!S->stmt) {
--- php-7.3.33/ext/snmp/snmp.c.orig	2021-11-16 12:18:30.000000000 +0100
+++ php-7.3.33/ext/snmp/snmp.c	2025-01-23 12:32:42.266117764 +0100
@@ -2022,7 +2022,7 @@
 }
 /* }}} */
 
-static HashTable *php_snmp_get_gc(zval *object, zval ***gc_data, int *gc_data_count) /* {{{ */
+static HashTable *php_snmp_get_gc(zval *object, zval **gc_data, int *gc_data_count) /* {{{ */
 {
 	*gc_data = NULL;
 	*gc_data_count = 0;
--- php-7.3.33/ext/interbase/ibase_query.c.orig	2021-11-16 12:18:38.000000000 +0100
+++ php-7.3.33/ext/interbase/ibase_query.c	2025-01-23 20:08:11.773054372 +0100
@@ -695,10 +695,12 @@
 			case SQL_TYPE_TIME:
 				if (Z_TYPE_P(b_var) == IS_LONG) {
 					struct tm *res;
-					res = php_gmtime_r(&Z_LVAL_P(b_var), &t);
+					time_t ts;
+					res = php_gmtime_r(&ts, &t);
 					if (!res) {
 						return FAILURE;
 					}
+					Z_LVAL_P(b_var) = (zend_long) ts;
 				} else {
 #ifdef HAVE_STRPTIME
 					char *format = INI_STR("ibase.timestampformat");
--- php-7.1.33/sapi/litespeed/lsapilib.c.orig	2019-10-22 19:00:03.000000000 +0200
+++ php-7.1.33/sapi/litespeed/lsapilib.c	2025-01-25 00:59:21.165154210 +0100
@@ -2875,10 +2875,11 @@
             return;
     }
     s_pid_dump_debug_info = fork();
+    time_t t = tmCur;
 
     fprintf( stderr, "[%s] Possible runaway process, PPID: %d, PID: %d, "
              "reqCount: %d, process time: %ld, checkpoint time: %ld, start "
-             "time: %ld\n", ctime(&tmCur), getpid(), pStatus->m_pid,
+             "time: %ld\n", ctime(&t), getpid(), pStatus->m_pid,
              pStatus->m_iReqCounter, tmCur - pStatus->m_tmReqBegin,
              tmCur - pStatus->m_tmLastCheckPoint, tmCur - pStatus->m_tmStart );
     snprintf( achCmd, 1024, "gdb --batch -ex \"attach %d\" -ex \"set height 0\" "
