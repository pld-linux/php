--- php-7.3.33/ext/interbase/ibase_events.c.orig	2021-11-16 12:18:38.000000000 +0100
+++ php-7.3.33/ext/interbase/ibase_events.c	2025-01-23 12:24:50.473401624 +0100
@@ -105,7 +105,7 @@
 	 * so we can work around it.
 	 */
 
-	*l = (unsigned short) isc_event_block(event_buf, result_buf, count, events[0],
+	*l = (unsigned short) isc_event_block((ISC_UCHAR**)event_buf, (ISC_UCHAR**)result_buf, count, events[0],
 		events[1], events[2], events[3], events[4], events[5], events[6], events[7],
 		events[8], events[9], events[10], events[11], events[12], events[13], events[14]);
 
--- php-7.3.33/ext/interbase/ibase_query.c.orig	2021-11-16 12:18:38.000000000 +0100
+++ php-7.3.33/ext/interbase/ibase_query.c	2025-01-23 20:08:11.773054372 +0100
@@ -695,10 +695,12 @@
 			case SQL_TYPE_TIME:
 				if (Z_TYPE_P(b_var) == IS_LONG) {
 					struct tm *res;
-					res = php_gmtime_r(&Z_LVAL_P(b_var), &t);
+					time_t ts;
+					res = php_gmtime_r(&ts, &t);
 					if (!res) {
 						return FAILURE;
 					}
+					Z_LVAL_P(b_var) = (long) ts;
 				} else {
 #ifdef HAVE_STRPTIME
 					char *format = INI_STR("ibase.timestampformat");
--- php-7.0.33/sapi/litespeed/lsapilib.c.orig	2025-01-25 12:05:15.151455149 +0100
+++ php-7.0.33/sapi/litespeed/lsapilib.c	2025-01-25 12:11:23.153577903 +0100
@@ -2654,9 +2654,10 @@
             return;
     }
     s_pid_dump_debug_info = fork();
+    time_t t = tmCur;
 
     fprintf( stderr, "[%s] Possible runaway process, PPID: %d, PID: %d, reqCount: %d, process time: %ld, checkpoint time: %ld, start time: %ld\n", 
-                ctime(&tmCur), getpid(), pStatus->m_pid, pStatus->m_iReqCounter, 
+                ctime(&t), getpid(), pStatus->m_pid, pStatus->m_iReqCounter, 
                 tmCur - pStatus->m_tmReqBegin, tmCur - pStatus->m_tmLastCheckPoint, tmCur - pStatus->m_tmStart ); 
     snprintf( achCmd, 1024, "gdb --batch -ex \"attach %d\" -ex \"set height 0\" -ex \"bt\" >&2;PATH=$PATH:/usr/sbin lsof -p %d >&2", pStatus->m_pid, pStatus->m_pid );
     if ( system( achCmd ) == -1 )
--- php-5.6.40/ext/zlib/zlib.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/zlib/zlib.c	2025-01-27 19:29:40.045109498 +0100
@@ -1032,7 +1032,7 @@
 	PHP_MINFO(zlib),
 	"2.0",
 	PHP_MODULE_GLOBALS(zlib),
-	ZEND_MODULE_GLOBALS_CTOR_N(zlib),
+	(void (*)(void*))ZEND_MODULE_GLOBALS_CTOR_N(zlib),
 	NULL,
 	NULL,
 	STANDARD_MODULE_PROPERTIES_EX
--- php-5.6.40/ext/fileinfo/libmagic/funcs.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/fileinfo/libmagic/funcs.c	2025-01-27 19:38:59.298313486 +0100
@@ -437,6 +437,7 @@
 	return ms->o.buf == NULL ? 0 : strlen(ms->o.buf);
 }
 
+int
 file_replace(struct magic_set *ms, const char *pat, const char *rep)
 {
 	zval *patt;
--- php-5.6.40/ext/interbase/ibase_events.c.orig	2025-01-27 00:37:50.826064380 +0100
+++ php-5.6.40/ext/interbase/ibase_events.c	2025-01-27 19:50:58.362432043 +0100
@@ -195,7 +195,7 @@
 /* }}} */
 
 static isc_callback _php_ibase_callback(ibase_event *event, /* {{{ */
-	unsigned short buffer_size, char *result_buf)
+	unsigned short buffer_size, const unsigned char *result_buf)
 {
 	/* this function is called asynchronously by the Interbase client library. */
 	TSRMLS_FETCH_FROM_CTX(event->thread_ctx);
@@ -246,7 +246,7 @@
 		case NEW:
 			/* re-register the event */
 			if (isc_que_events(IB_STATUS, &event->link->handle, &event->event_id, buffer_size,
-				event->event_buffer,(isc_callback)_php_ibase_callback, (void *)event)) {
+				event->event_buffer,(ISC_EVENT_CALLBACK)_php_ibase_callback, (void *)event)) {
 
 				_php_ibase_error(TSRMLS_C);
 			}
@@ -356,7 +356,7 @@
 
 	/* now register the events with the Interbase API */
 	if (isc_que_events(IB_STATUS, &ib_link->handle, &event->event_id, buffer_size,
-		event->event_buffer,(isc_callback)_php_ibase_callback, (void *)event)) {
+		event->event_buffer,(ISC_EVENT_CALLBACK)_php_ibase_callback, (void *)event)) {
 
 		_php_ibase_error(TSRMLS_C);
 		efree(event);
--- php-5.6.40/ext/mbstring/libmbfl/filters/mbfilter_iso2022jp_mobile.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/mbstring/libmbfl/filters/mbfilter_iso2022jp_mobile.c	2025-01-27 19:55:53.530789321 +0100
@@ -48,7 +48,7 @@
 	mbfl_no_encoding_2022jp_kddi,
 	"ISO-2022-JP-MOBILE#KDDI",
 	"ISO-2022-JP",
-	mbfl_encoding_2022jp_kddi_aliases,
+	&mbfl_encoding_2022jp_kddi_aliases,
 	NULL,
 	MBFL_ENCTYPE_MBCS | MBFL_ENCTYPE_SHFTCODE | MBFL_ENCTYPE_GL_UNSAFE
 };
--- php-5.6.40/ext/mbstring/libmbfl/filters/mbfilter_utf8_mobile.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/mbstring/libmbfl/filters/mbfilter_utf8_mobile.c	2025-01-27 19:58:18.801621337 +0100
@@ -38,6 +38,7 @@
 
 extern int mbfl_filt_ident_utf8(int c, mbfl_identify_filter *filter);
 extern int mbfl_filt_conv_utf8_wchar_flush(mbfl_convert_filter *filter);
+extern int mbfl_filt_put_invalid_char(int c, mbfl_convert_filter *filter);
 
 extern const unsigned char mblen_table_utf8[];
 
--- php-5.6.40/ext/mssql/php_mssql.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/mssql/php_mssql.c	2025-01-27 19:59:45.608785170 +0100
@@ -1122,7 +1122,7 @@
 			}
 			
 			res_length = 19;
-			spprintf(&res_buf, 0, "%d-%02d-%02d %02d:%02d:%02d" , dateinfo.year, dateinfo.month, dateinfo.day, dateinfo.hour, dateinfo.minute, dateinfo.second);
+			spprintf((char**)&res_buf, 0, "%d-%02d-%02d %02d:%02d:%02d" , dateinfo.year, dateinfo.month, dateinfo.day, dateinfo.hour, dateinfo.minute, dateinfo.second);
 		}
 
 		ZVAL_STRINGL(result, res_buf, res_length, 0);
--- php-5.6.40/ext/pdo_dblib/pdo_dblib.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/pdo_dblib/pdo_dblib.c	2025-01-27 20:05:32.840773848 +0100
@@ -138,7 +138,7 @@
 }
 
 int msg_handler(DBPROCESS *dbproc, DBINT msgno, int msgstate,
-	int severity, char *msgtext, char *srvname, char *procname, DBUSMALLINT line)
+	int severity, char *msgtext, char *srvname, char *procname, DBINT line)
 {
 	pdo_dblib_err *einfo;
 	TSRMLS_FETCH();
--- php-5.6.40/ext/pdo_dblib/php_pdo_dblib_int.h.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/pdo_dblib/php_pdo_dblib_int.h	2025-01-27 20:07:05.007968377 +0100
@@ -93,7 +93,7 @@
 	int oserr, char *dberrstr, char *oserrstr);
 
 int msg_handler(DBPROCESS *dbproc, DBINT msgno, int msgstate,
-	int severity, char *msgtext, char *srvname, char *procname, DBUSMALLINT line);
+	int severity, char *msgtext, char *srvname, char *procname, DBINT line);
 
 extern pdo_driver_t pdo_dblib_driver;
 extern struct pdo_stmt_methods dblib_stmt_methods;
--- php-5.6.40/ext/session/session.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/session/session.c	2025-01-27 20:09:13.952040203 +0100
@@ -864,7 +864,7 @@
 
 	PHP_VAR_UNSERIALIZE_INIT(var_hash);
 	ALLOC_INIT_ZVAL(session_vars);
-	if (php_var_unserialize(&session_vars, &val, endptr, &var_hash TSRMLS_CC)) {
+	if (php_var_unserialize(&session_vars, (const unsigned char**) &val, endptr, &var_hash TSRMLS_CC)) {
 		var_push_dtor(&var_hash, &session_vars);
 	}
 
--- php-5.6.40/ext/wddx/wddx.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/wddx/wddx.c	2025-01-27 20:13:44.643590516 +0100
@@ -535,7 +535,7 @@
 				continue;
 			}
 
-			if (zend_hash_get_current_key_ex(objhash, &key, &key_len, &idx, 0, NULL) == HASH_KEY_IS_STRING) {
+			if (zend_hash_get_current_key_ex(objhash, (char**)&key, &key_len, &idx, 0, NULL) == HASH_KEY_IS_STRING) {
 				const char *class_name, *prop_name;
 
 				zend_unmangle_property_name(key, key_len-1, &class_name, &prop_name);
--- php-5.6.40/sapi/litespeed/lsapi_main.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/sapi/litespeed/lsapi_main.c	2025-01-27 22:38:03.269825030 +0100
@@ -69,6 +71,8 @@
 
 #define SAPI_LSAPI_MAX_HEADER_LENGTH 2048
 
+void LSAPI_No_Check_ppid();
+
 /* Key for each cache entry is dirname(PATH_TRANSLATED).
  *
  * NOTE: Each cache entry config_hash contains the combination from all user ini files found in
--- php-5.6.40/ext/interbase/interbase.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/interbase/interbase.c	2025-01-28 00:04:49.746301207 +0100
@@ -897,7 +897,7 @@
 	long largs[] = { 0, 0, 0 };
 	PHP_MD5_CTX hash_context;
 	zend_rsrc_list_entry new_index_ptr, *le;
-	isc_db_handle db_handle = NULL;
+	isc_db_handle db_handle = (isc_db_handle) NULL;
 	ibase_db_link *ib_link;
 
 	RESET_ERRMSG;
@@ -1108,7 +1108,7 @@
 
 	/* isc_drop_database() doesn't invalidate the transaction handles */
 	for (l = ib_link->tr_list; l != NULL; l = l->next) {
-		if (l->trans != NULL) l->trans->handle = NULL;
+		if (l->trans != NULL) l->trans->handle = (isc_tr_handle) NULL;
 	}
 
 	zend_list_delete(link_id);
@@ -1128,7 +1128,7 @@
 	char last_tpb[TPB_MAX_SIZE];
 	ibase_db_link **ib_link = NULL;
 	ibase_trans *ib_trans;
-	isc_tr_handle tr_handle = NULL;
+	isc_tr_handle tr_handle = (isc_tr_handle) NULL;
 	ISC_STATUS result;
 	
 	RESET_ERRMSG;
@@ -1289,7 +1289,7 @@
 
 		if (tr == NULL) {
 			tr = (ibase_trans *) emalloc(sizeof(ibase_trans));
-			tr->handle = NULL;
+			tr->handle = (isc_tr_handle) NULL;
 			tr->link_cnt = 1;
 			tr->affected_rows = 0;
 			tr->db_link[0] = ib_link;
--- php-5.6.40/ext/interbase/ibase_query.c.orig	2025-01-27 23:26:52.413255597 +0100
+++ php-5.6.40/ext/interbase/ibase_query.c	2025-01-28 00:22:00.565540896 +0100
@@ -328,7 +328,7 @@
 	ib_query->trans = trans;
 	ib_query->result_res_id = 0;
 	ib_query->result = NULL;
-	ib_query->stmt = NULL;
+	ib_query->stmt = (isc_stmt_handle) NULL;
 	ib_query->in_array = NULL;
 	ib_query->out_array = NULL;
 	ib_query->dialect = dialect;
@@ -739,7 +739,7 @@
 				if (Z_STRLEN_P(b_var) != BLOB_ID_LEN ||
 					!_php_ibase_string_to_quad(Z_STRVAL_P(b_var), &buf[i].val.qval)) {
 
-					ibase_blob ib_blob = { NULL, BLOB_INPUT };
+					ibase_blob ib_blob = { (isc_blob_handle) NULL, BLOB_INPUT };
 
 					if (isc_create_blob(IB_STATUS, &ib_query->link->handle,
 							&ib_query->trans->handle, &ib_blob.bl_handle, &ib_blob.bl_qd)) {
@@ -886,7 +886,7 @@
 		case isc_info_sql_stmt_start_trans:
 
 			/* a SET TRANSACTION statement should be executed with a NULL trans handle */
-			tr = NULL;
+			tr = (isc_tr_handle) NULL;
 
 			if (isc_dsql_execute_immediate(IB_STATUS, &ib_query->link->handle, &tr, 0, 
 					ib_query->query, ib_query->dialect, NULL)) {
@@ -1102,8 +1102,8 @@
 			/* the statement is 'CREATE DATABASE ...' if the link argument is IBASE_CREATE */
 			if (SUCCESS == zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS()
 					TSRMLS_CC, "ls", &l, &query, &query_len) && l == PHP_IBASE_CREATE) {
-				isc_db_handle db = NULL;
-				isc_tr_handle trans = NULL;
+				isc_db_handle db = (isc_db_handle) NULL;
+				isc_tr_handle trans = (isc_db_handle) NULL;
 
 				if (PG(sql_safe_mode)) {
 					_php_ibase_module_error("CREATE DATABASE is not allowed in SQL safe mode"
@@ -1184,7 +1184,7 @@
 
 			/* EXECUTE PROCEDURE returns only one row => statement can be released immediately */
 			if (ib_query.statement_type != isc_info_sql_stmt_exec_procedure) {
-				ib_query.stmt = NULL; /* keep stmt when free query */
+				ib_query.stmt = (isc_stmt_handle) NULL; /* keep stmt when free query */
 			}
 			ZEND_REGISTER_RESOURCE(return_value, result, le_result);
 		}
@@ -1552,7 +1552,7 @@
 						char bl_info[20];
 						unsigned short i;
 
-						blob_handle.bl_handle = NULL;
+						blob_handle.bl_handle = (isc_blob_handle) NULL;
 						blob_handle.bl_qd = *(ISC_QUAD *) var->sqldata;
 
 						if (isc_open_blob(IB_STATUS, &ib_result->link->handle, &ib_result->trans->handle,
@@ -1843,7 +1843,7 @@
 		if (result != NULL) {
 			result->type = EXECUTE_RESULT;
 			if (ib_query->statement_type == isc_info_sql_stmt_exec_procedure) {
-				result->stmt = NULL;
+				result->stmt = (isc_stmt_handle) NULL;
 			}
 			ib_query->result_res_id = zend_list_insert(result, le_result TSRMLS_CC);
 			RETVAL_RESOURCE(ib_query->result_res_id);
--- php-5.6.40/ext/interbase/ibase_service.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/interbase/ibase_service.c	2025-01-28 00:25:34.393431998 +0100
@@ -211,7 +211,7 @@
 	int hlen, ulen, plen, spb_len;
 	ibase_service *svm;
 	char buf[128], *host, *user, *pass, *loc;
-	isc_svc_handle handle = NULL;
+	isc_svc_handle handle = (isc_svc_handle) NULL;
 
 	RESET_ERRMSG;
 
--- php-5.6.40/ext/interbase/ibase_events.c.orig	2025-01-27 23:26:52.416588950 +0100
+++ php-5.6.40/ext/interbase/ibase_events.c	2025-01-28 00:28:28.141093592 +0100
@@ -91,7 +91,7 @@
 	char **events, unsigned short *l, char **event_buf, char **result_buf)
 {
 	ISC_STATUS dummy_result[20];
-	unsigned long dummy_count[15];
+	ISC_ULONG dummy_count[15];
 
 	/**
 	 * Unfortunately, there's no clean and portable way in C to pass arguments to
@@ -129,7 +129,7 @@
 	int num_args;
 	char *event_buffer, *result_buffer, *events[15];
 	unsigned short i = 0, event_count = 0, buffer_size;
-	unsigned long occurred_event[15];
+	ISC_ULONG occurred_event[15];
 
 	RESET_ERRMSG;
 
@@ -207,7 +207,7 @@
 	 */
 	switch (event->state) {
 		unsigned short i;
-		unsigned long occurred_event[15];
+		ISC_ULONG occurred_event[15];
 		zval event_name, link_id, return_value, *args[2];
 
 		default: /* == DEAD */
--- php-5.6.40/ext/interbase/ibase_blobs.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/interbase/ibase_blobs.c	2025-01-28 21:34:20.861538207 +0100
@@ -218,7 +218,7 @@
 	PHP_IBASE_LINK_TRANS(link, ib_link, trans);
 
 	ib_blob = (ibase_blob *) emalloc(sizeof(ibase_blob));
-	ib_blob->bl_handle = NULL;
+	ib_blob->bl_handle = (isc_blob_handle) NULL;
 	ib_blob->type = BLOB_INPUT;
 
 	if (isc_create_blob(IB_STATUS, &ib_link->handle, &trans->handle, &ib_blob->bl_handle, &ib_blob->bl_qd)) {
@@ -262,7 +262,7 @@
 	PHP_IBASE_LINK_TRANS(link, ib_link, trans);
 
 	ib_blob = (ibase_blob *) emalloc(sizeof(ibase_blob));
-	ib_blob->bl_handle = NULL;
+	ib_blob->bl_handle = (isc_blob_handle) NULL;
 	ib_blob->type = BLOB_OUTPUT;
 
 	do {
@@ -362,7 +362,7 @@
 				RETURN_FALSE;
 			}
 		}
-		ib_blob->bl_handle = NULL;
+		ib_blob->bl_handle = (isc_blob_handle) NULL;
 
 		RETVAL_STRINGL(_php_ibase_quad_to_string(ib_blob->bl_qd), BLOB_ID_LEN, 0);
 	} else { /* discard created blob */
@@ -370,7 +370,7 @@
 			_php_ibase_error(TSRMLS_C);
 			RETURN_FALSE;
 		}
-		ib_blob->bl_handle = NULL;
+		ib_blob->bl_handle = (isc_blob_handle) NULL;
 		RETVAL_TRUE;
 	}
 	zend_list_delete(Z_LVAL_PP(blob_arg));
@@ -402,7 +402,7 @@
 	zval *link = NULL;
 	ibase_db_link *ib_link;
 	ibase_trans *trans = NULL;
-	ibase_blob ib_blob = { NULL, BLOB_INPUT };
+	ibase_blob ib_blob = { (isc_blob_handle) NULL, BLOB_INPUT };
 	IBASE_BLOBINFO bl_info;
 
 	RESET_ERRMSG;
@@ -478,7 +478,7 @@
 	zval *link = NULL;
 	ibase_db_link *ib_link;
 	ibase_trans *trans = NULL;
-	ibase_blob ib_blob_id = { NULL, BLOB_OUTPUT  };
+	ibase_blob ib_blob_id = { (isc_blob_handle) NULL, BLOB_OUTPUT  };
 	char bl_data[IBASE_BLOB_SEG];
 	unsigned short seg_len;
 
@@ -539,7 +539,7 @@
 	zval *link = NULL, *file;
 	int size;
 	unsigned short b;
-	ibase_blob ib_blob = { NULL, 0 };
+	ibase_blob ib_blob = { (isc_blob_handle) NULL, 0 };
 	ibase_db_link *ib_link;
 	ibase_trans *trans = NULL;
 	char bl_data[IBASE_BLOB_SEG];
--- php-5.6.40/ext/pdo_firebird/firebird_driver.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/pdo_firebird/firebird_driver.c	2025-01-28 21:39:33.790012162 +0100
@@ -140,7 +140,7 @@
 	HashTable *np;
 
 	do {
-		isc_stmt_handle s = NULL;
+		isc_stmt_handle s = (isc_stmt_handle) NULL;
 		XSQLDA num_sqlda;
 		static char const info[] = { isc_info_sql_stmt_type };
 		char result[8];
@@ -221,7 +221,7 @@
 static long firebird_handle_doer(pdo_dbh_t *dbh, const char *sql, long sql_len TSRMLS_DC) /* {{{ */
 {
 	pdo_firebird_db_handle *H = (pdo_firebird_db_handle *)dbh->driver_data;
-	isc_stmt_handle stmt = NULL;
+	isc_stmt_handle stmt = (isc_stmt_handle) NULL;
 	static char const info_count[] = { isc_info_sql_records };
 	char result[64];
 	int ret = 0;
--- php-5.6.40/ext/pdo_firebird/firebird_statement.c.orig	2019-01-09 10:54:13.000000000 +0100
+++ php-5.6.40/ext/pdo_firebird/firebird_statement.c	2025-01-28 21:41:39.294070332 +0100
@@ -223,7 +223,7 @@
 {
 	pdo_firebird_stmt *S = (pdo_firebird_stmt*)stmt->driver_data;
 	pdo_firebird_db_handle *H = S->H;
-	isc_blob_handle blobh = NULL;
+	isc_blob_handle blobh = (isc_blob_handle) NULL;
 	char const bl_item = isc_info_blob_total_length;
 	char bl_info[20];
 	unsigned short i;
@@ -412,7 +412,7 @@
 {
 	pdo_firebird_stmt *S = (pdo_firebird_stmt*)stmt->driver_data;
 	pdo_firebird_db_handle *H = S->H;
-	isc_blob_handle h = NULL;
+	isc_blob_handle h = (isc_blob_handle) NULL;
 	unsigned long put_cnt = 0, rem_cnt;
 	unsigned short chunk_size;
 	int result = 1;
